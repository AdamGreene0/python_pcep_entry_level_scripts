#*******Absolute beginning of the script***************

#Developer Name: Akinwale "Wally" Owi
#Program purpose: Rebuild Tic Tac Toe: this time with the lab requested functions


#**********Beginning of computations*************


#import(s)
import random

#Players
player_1 = "o"
cpu = "x"

#~~~~~~~~~~Beginning of creating the list/board creation
board = []
still_open = "~" 
board =[[still_open for rows in range(3)] for columns in range(3)]


board[0][0] = 1
board[0][1] = 2
board[0][2] = 3

board[1][0] = 4
board[1][1] = "x"
board[1][2] = 6

board[2][0] = 7
board[2][1] = 8
board[2][2] = 9

#~~~~~~~~~~End of board creation~~~~


#~~~~~~~~~~Beginning of fxs

#~~Beginning of display board - 1 prints current board
def display_board(board):
    print("The board currently looks like:", board)

#~~End of display board - 1 prints current board 2 prints the current game store

#~~Beginning of enter_choice(board):
def enter_choice(board):

    display_board(board)
    choice_player = int(input("Please enter your move: "))
    print(choice_player)

    #1 condition if
    if  choice_player == 1:
        #open check
        if (board [0][0] != 1):
            enter_choice(board)
        else:
            board [0][0] = player_1        
            print("After the player the move, the board:", board)
                
    elif choice_player == 2:

        #open check
        if (board [0][1] != 2):
            enter_choice(board)
        else:
            board [0][1] = player_1     
            print("After the player the move, the board:", board)


    elif choice_player == 3:

        #open check
        if (board [0][2] != 3):
            enter_choice(board)
        else:
            board [0][2] = player_1
            print("After the player the move, the board:", board)    
      
    elif choice_player == 4:

        #open check
        if (board [1][0] != 4):
            enter_choice(board)
        else:    
             board [1][0] = player_1
             print("After the player the move, the board:", board)    

    elif choice_player == 5:

        #open check
        if (board [1][1] != "x"):
            enter_choice(board)
        else:
            board [1][1] = player_1
            print("After the player the move, the board:", board)     

    elif choice_player == 6:

        #open check
        if (board [1][2] != 6):
            enter_choice(board)
        else:
            board [1][2] = player_1
            print("After the player the move, the board:", board)     

    elif choice_player == 7:

         #open check
        if (board [2][0] != 7):
            enter_choice(board)
        else:
            board [2][0] = player_1
            print("After the player the move, the board:", board)     
            
        
    elif choice_player == 8:

        #open check
        if (board [2][1] != 8):
            enter_choice(board)
        else:
            board [2][1] = player_1
            print("After the player the move, the board:", board) 
            
                
    elif choice_player == 9:

        #open check
        if (board [2][2] != 9):
            enter_choice(board)
        else:
            board [2][2] = player_1
            print("After the player the move, the board:", board) 
    
    else:
        print("Sorry that is not a choice")
        enter_choice(board)
        
#~~End of enter_choice(board):


#~~Beginning of open_spaces(board):
def open_spaces(board):
    #print("All of the board's spaces currently:", board)
    
    #Morphing the board list into a tuple = the food is making a tuple out of row and column pairs
    #tuple_board = tuple(board)
    #print("Tuple of board:", tuple_board)

    list_open_spaces = []

    #row 1
    tuple_row_1 = ((board[0][0]),(board[0][1]),(board[0][2]))
    print("Row 1: ",tuple_row_1)


    #row 2
    tuple_row_2 = ((board[1][0]),(board[1][1]),(board[1][2]))
    print("Row 2: ",tuple_row_2)


    #row 3
    tuple_row_3 = ((board[2][0]),(board[2][1]),(board[2][2]))
    print("Row 3: ",tuple_row_3)
    
    #~~~Beginning of open space list building~~~~~
    
    #Beginning of for space in tuple_row_1 :
    for space in tuple_row_1 :
        #Beginning of if type(space) == int:
        if type(space) == int:
            list_open_spaces.append(space)
        #end of if type(space) == int:
    #End of for space in tuple_row_1 :

    #Beginning of for space in tuple_row_2 :
    for space in tuple_row_2 :
        #Beginning of if type(space) == int:
        if type(space) == int:
            list_open_spaces.append(space)
        #end of if type(space) == int:
    #End of for space in tuple_row_ 2


    #Beginning of for space in tuple_row_2 :
    for space in tuple_row_3 :
        #Beginning of if type(space) == int:
        if type(space) == int:
            list_open_spaces.append(space)
        #end of if type(space) == int:
    #End of for space in tuple_row_3
    

            
   
    
    #~~~End of open space list building~~~~~
    #printing the result
    print("List of all openings:",list_open_spaces)

#~~End of open_spaces(board):
    
#~~Beginning of def victory_check(board, character):
def victory_check(board, character):

    game_over = False
    print ("Game over:?",game_over)

    enter_choice(board)
    while(game_over == False):
        cpu_move(board)
        enter_choice(board)
        #display_board(board)

        #~~~~~~~Beginning of win conditions~~~~~~~~

        if ( (board [0][0] == player_1) and (board [0][1] == player_1) and (board [0][2] == player_1) ):
            print ("Player 1 wins, row 1 sweep,  game over")
            game_over = True
            break

        elif ( (board [2][0] == player_1) and (board [2][1] == player_1) and (board [2][2] == player_1) ):
            print ("Player 1 wins, row 3 sweep, game over")
            game_over = True
            break
        
        #Column wins
        elif ( (board [0][0] == player_1) and (board [1][0] == player_1) and (board [2][0] == player_1) ):
            print ("Player 1 wins, column 1 win, game over")
            game_over = True
            break

        elif ( (board [0][2] == player_1) and (board [1][2] == player_1) and (board [2][2] == player_1) ):
            print ("Player 1 wins, column 3 win, game over")
            game_over = True
            break

        #~Tie~
        elif ( (board [0][0] != 1) and (board [0][1] != 2) and (board [0][2] != 3) and (board [1][0] != 4) and (board [1][1] != 5) and (board [1][2] != 6) and  (board [2][0] != 7) and(board [2][1] != 8) and (board [2][2] != 9) ):
            print ("Tie! Game over!")
            game_over = True
            break


        #~Cpu wins~
        #Cpu Row wins
        if ( (board [0][0] == cpu) and (board [0][1] == cpu) and (board [0][2] == cpu) ):
            print ("cpu wins, row 1 sweep,  game over")
            game_over = True
            break

        elif ( (board [1][0] == cpu) and (board [1][1] == cpu) and (board [1][2] == cpu) ):
            print ("cpu wins, row 2 sweep, game over")
            game_over = True
            break

        elif ( (board [2][0] == cpu) and (board [2][1] == cpu) and (board [2][2] == cpu) ):
            print ("cpu wins, row 3 sweep, game over")
            game_over = True
            break

        #Cpu column wins
        elif ( (board [0][0] == cpu) and (board [1][0] == cpu) and (board [2][0] == cpu) ):
            print ("Cpu wins, column 1 win, game over")
            game_over = True
            break

        elif ( (board [0][1] == cpu) and (board [1][1] == cpu) and (board [2][1] == cpu) ):
            print ("Cpu wins, column 2 win, game over")
            game_over = True
            break

        elif ( (board [0][2] == cpu) and (board [1][2] == cpu) and (board [2][2] == cpu) ):
            print ("Cpu wins, column 3 win, game over")
            game_over = True
            break

        #cpu diagonal wins
        elif ( (board [0][0] == cpu) and (board [1][1] == cpu) and (board [2][2] == cpu) ):
            print ("Cpu wins, diagonal win 0 to 2, game over")
            game_over = True
            break


        elif ( (board [0][2] == cpu) and (board [1][1] == cpu) and (board [2][0] == cpu) ):
            print ("Cpu wins, diagonal win 2 to 0, game over")
            game_over = True
            break
            
        else:
            game_over = False
            #cpu_move()



    #~~~~~~~~~End of win conditions~~~~~~~
     
    

#~~End of def victory_check(board, character):

#~~Beginning of def cpu_move(board):
def cpu_move(board):

    choice_cpu = (random.randint(1,9))
    print("cpu roll was ", choice_cpu)

    if (choice_cpu == 1):
        #open check
        if (board [0][0] != 1):
            cpu_move(board)
        else:
            board [0][0] = cpu
            
          
    elif choice_cpu == 2:

        #open check
        if  (board [0][1] != 2):
            cpu_move(board)
        else:
            board [0][1] = cpu
                
        
    elif choice_cpu == 3:

         #open check
        if  (board [0][1] != 3):
            cpu_move(board)
        else:
            
            board [0][2] = cpu
            
        
    elif choice_cpu == 4:

         #open check
        if  (board [1][0] != 4):
            cpu_move(board)
        else:

            board [1][0] = cpu
             

    #No 5 because the cpus 1st move is always 1,1
    elif choice_cpu == 5:
        cpu_move(board)
                
    elif choice_cpu == 6:

         #open check
        if  (board [1][2] != 6):
            cpu_move(board)
        else:
            board [1][2] = cpu
            

    elif choice_cpu == 7:

         #open check
        if  (board [2][0] != 7):
            cpu_move(board)
        else:

            board [2][0] = cpu
             
    elif choice_cpu == 8:

         #open check
        if  (board [2][1] != 8):
            cpu_move(board)
        else:

            board [2][1] = cpu
            
    #cpu rolled a 9
    else:

         #open check
        if  (board [2][2] != 9):
            cpu_move(board)
        else:
            board [2][2] = cpu

#~~End of def cpu_move(board):

#~~~~~~~~~~End of fxs


#Test 5 - just checking if either side won
victory_check(board, player_1)


#*******Absolute end of the script***************





